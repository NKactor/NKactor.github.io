[{"title":"模型基础","date":"2018-11-26T16:00:00.000Z","path":"2018/11/27/django模型基础/","text":"一、模型介绍1. 对象关系映射（ORM） 使用ORM完成模型的CRUD操作 2. 创建一个简单的学生模型&emsp;&emsp;如：1234class Student(models.Model): name = models.CharField(max_length=10, unique=True) age = models.IntegerField(default=18) gender = models.BooleanField(default=1) 3. 配置数据库 3.1 在项目文件夹下的setting.py中修改数据库类型和配置数据库连接信息 &emsp;&emsp;如：12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'dj7', 'USER': 'root', 'PASSWORD': '123456', 'HOST': 'localhost', 'PORT': 3306 &#125;&#125; 3.2 其次需要在项目文件夹下的init.py中添加对应的数据库驱动 mysql如下： import pymysql (如果没有pymysql的需要安装pymysql第三方库)pymysql.install_as_MySQLdb() 4. 注册应用 在项目文件下的setting.py文件中的INSTALLED_APPS最后添加应用名 &emsp;&emsp;如：1234INSTALLED_APPS = [ 这里省略部分默认代码 'app'] 5. 生成迁移文件 格式： python manage.py makemigrations 此时会在项目文件夹下的migration文件夹下创建一个迁移文件 如：0001_initial.py 6. 制作迁移 格式： python manage.py migrate 此时在数据库中就会创建一张与模型向对应的数据库表（其中自动创建一个id字段并且自动增长和是主键） 二、更改启动服务的ip和端口 格式：python manage.py runserver ip:port或者格式：python manage.py runserver port 注意：后面参数可以是IP：port 或者 port，不能只是ip 三、Debug(程序调试)1. 在自己认为可能出现错误的地方添加断点，再通过Debug对程序进行检查调试2. python中可以通过debug控制台打印程序运行值检查是否出错","tags":[]},{"title":"Django基础","date":"2018-11-26T13:55:55.693Z","path":"2018/11/26/django/","text":"django基础 一、命令行安装虚拟环境1. 安装虚拟环境 格式： pip install virtualenv 2.virtualenv 参数解释 -p参数： 指定安装的python版本 –no-site-packages参数： 指定安装虚拟环境的空文件夹 二、创建虚拟环境1、命令格式 virtualenv –no-site-packages -p python版本（具体的python安装路径） 环境名称 例如 virtualenv –no-site-packages djenv7 2、进入环境激活环境 cd scripitsactivate 退出命令 deactivate 3、查看当前虚拟环境下已经安装的包（在虚拟环境激活状态下） pip list 或者 pip freeze 二、安装Django1、命令行下进入虚拟环境scripts 安装Django1.11版本 pip install django==1.11 三、创建Django项目1、进入上面创建的虚拟环境中并激活环境（也可以在pycharm中创建，但推荐使用命令行创建）2、 创建项目 格式django-admin startproject 项目名 例如django-admin startproject day01 使用manage.py启动服务 格式python manage.py runserver ####3、创建应用 格式python manage.py startapp 应用名 例如python manage.py startapp app 项目创完成后就可以启动Django内置服务器来访问当前创建的项目了使用默认的启动ip和端口访问 127.0.0.1:8000 进入虚拟环境中（也可在pycharm中的terminal来进入虚拟环境，下面我是采用命令行的方式） cd scriptsactivatepython manage.py runserver 可以通过访问django提供的后台管理界面 127.0.0.1:8000/admin 但是需要先创建超级管理员，创建管理员时需要在数据库中创建表，即制作迁移 注意： 由于python3不提供pymysqldb，所以需要先安装pymysql并引入mysqldb 四、安装pymysql1、 pip install pymysql2、在项目文件day01下的inin.py文件中引入pymysql并使用mysqldb()（python3中不在提供mysqldb） import pymysqlpymysql.install_as_MySQLdb() 五、制作迁移并创建管理员1、制作项目迁移 格式： python manage.py migrate 2、创建超级管理员 python manage.py createsuperuser 输入用户名和邮箱、密码 六、创建一个简单的Django项目1、先在app应用下views.py文件下创建一个相应处理函数12345# 导入一个响应from django.http import HttpResponsedef hello(request): return HttpResponse('hello world') 2、在项目文件夹下的init.py 文件中配置路由 url(正则， 视图函数) 1234# 导入应用下的viewsfrom app import views url(r'^hello/', views.hello), 3、 启动服务器并访问上面配置的url4、 启动服务器 python manage.py runserver 5、 访问下面的url就会返回一个hell world 127.0.0.1:8000/hello/","tags":[]}]